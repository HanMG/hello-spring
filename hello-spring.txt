1. springboot 에서는 기본적으로 welcomePage를 지원
main/resources/static 아래에 index.html이 존재하면 welcomePage로 인식한다.

2. 컨트롤러에서 리턴 값으로 문자를 반환하면 뷰 리졸버(viewResolver)가 화면을 찾아 처리한다.
- 컨트롤러에서 return "viewName";
- 리턴 값을 가지고 찾는다. resources:templates/viewName.html

@spring-boot-devtools 라이브러리를 추가하면, html파일을 컴파일해주면 서버 재시작할 필요없이
View 파일 변경이 가능하다.
인텔리J : build -> Recompile


3. 빌드하고 실행하기
	1. terminal에서 해당 프로젝트로 이동후 gradlew build를 하면
	2. build/libs에 jar파일로 생성됨
	3. java -jar hello-spring-0.0.1-SNAPSHOT.jar
	4. 실행확인

4. 정적컨텐츠
    1. static 아래에 원하는 파일을 넣고 url로 입력하면 결과가 그냥 나옴
    - 우선 url에 입력된 컨트롤러가 있는지 찾아보고, 아닐시 static에서 찾는다.

5. MVC(Model, View, Controller)
    1. @RequestParam으로 데이터 받고(?name=데이터) 그걸 model.addAttribute로 보내주면
    2. viewResolver를 통해 이동후 thymeleaf로 html을 변환하여 브라우저로 다시보냄

6. API 방식
    1. @ResponseBody가 있을시 HTTP의 BODY에 문자 내용을 직접 반환
    1. viewResolver 대신에 HttpMessageConverter가 동작
    2. 단순 문자열이면 StringConverter, 객체면 JSONConverter(Jackson2)가 동작
    3. JSON 형식으로 반환

7. 테스트 케이스 작성
    1. core.api.Assertions의 assertThat을 이용해 테스트를 할 수있음.
    2. 클래스 단위로 테스트할때 함수들의 테스트의 순서는 정해져있지않음
    3. 서로 의존관계가 없게 해야해서 @after 어노테이션 과 함께 공용데이터를 clear 해줘야함
    4. 테스트 먼저 만들어 검증후 개발하는 것을 테스트 주도개발이라함 TDD

8. 서비스
    1. 실제 비지니스 로직을 구현

9. 스프링 빈과 의존관계
    @ 스프링 빈을 등록하는 2가지 방법
        1. 컴포넌트 스캔과 자동 의존관계 설정
        2. 자바 코드로 직접 스프링 빈 등록
    @ 컴포넌트 스캔과 자동 의존관계 설정
        1. @Component 애노테이션이 있으면 스프링 빈으로 자동 등록
        2. @Controller 컨트롤러가 스프링 빈으로 자동등록된 이유도 컴포넌트 스캔 때문이다.
    @ @Component 를 포함하는 다음 애노테이션도 스프링 빈으로 자동 등록된다.
        1. @Controller
        2. @Service
        3. @Repository
    @ 스프링은 스프링 컨테이너에 스프링 빈을 등록할 때, 기본적으로 싱글톤으로 등록. 따라서
        같은 스프링 빈이면 모두 같은 인스턴스다.

10. 자바 코드로 직접 스프링 빈 등록
    @ DI 에는 필드 주입, setter 주입, 생성자 주입이 있음
        1. 필드 주입은 변경 할 수 있는 방법이 없음,
        2. setter 주입은 setter 메서드를 생성하고 거기에 @Autowired를 붙인 것으로,
           public하게 노출되어 문제가 있음
        3. 생성자 주입은 가장 많이 쓰이고 조립시에만 생성하고 변경을 못함.
    @ 정형화된 컨트롤러, 서비스, 리포지토리 같은 코드는 컴포넌트 스캔을 사용,
      정형화되지 않거나 상황에 따라 구현 클래스를 변경해야 하면 설정을 통해 스트링 빈으로 사용
    @ 주의점:  @Autowired 를 통한 DI는 helloController, MemberService와 같이 스프링이 관리
            하는 객체에서만 동작한다. 스프링 빈으로 등록하지 않고 내가 직접 생성한 객체에서는 동작 X




@단축키

ctrl + p = parameter 확인 가능
alt + insert = getter, setter같은 generater
alt + enter를 통해 static import 가능
ctrl + alt + M 을 통해 Method Extract
ctrl + shift + T 를 실제 클래스에 놓고 누르면 자동으로 테스트케이스 생성이 뜸
ctrl + alt + v = 변수 추출